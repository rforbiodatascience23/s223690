---
title: "04_describe"
format:
  html:
    embed-resources: true
editor: visual
---

# Load packages

```{r}
library(tidyverse)
library(DESeq2)
library(umap)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)

```

# Load the data

```{r Load the data}
setwd("C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R")
clean_data <- read.delim("../data/clean_data.tsv", 
                         row.names = 1, 
                         stringsAsFactors = FALSE)

```

# Preparation for the DESeq analysis

```{r Create the DESeq input (DESeq matrix)}
# Set the sample names
sample_names <- colnames(clean_data)

# Set the sample conditions
sample_condition <- strsplit(sample_names, "_")
sample_condition <- sapply(sample_condition, function(x) x[1])

# Create a data frame with sample information
DESeq_matrix <- data.frame(sampleName = sample_names, 
                           fileName = t(clean_data),
                           condition = sample_condition)

# Convert clean_data to a matrix
count_matrix <- as.matrix(clean_data)

# Create a DESeqDataSet object. The round(count_matrix) help to have non-negative integers.
dds <- DESeqDataSetFromMatrix(countData = round(count_matrix),
                              colData = DESeq_matrix,
                              design = ~ condition)

#Get rid of the genes that have very low count
dds <- dds[ rowSums(counts(dds)) > 10, ]
```

# Visual representation

For the visual representation, we will use a PCA plot. Before performing the plot, it is necessary to do VST (Variance Stabilising Transformation) to guarantee a normalization and stabilize the variance across the genes.

```{r VST and PCA plot}
#VST (Variance Stabilising Transformation) for the PCA plot
dds <- estimateSizeFactors(dds)

vst <- vst(dds, blind = FALSE)

sampleDists <- dist(t(assay(vst)))

#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)

colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)

#jpeg("../doc/photos/distance_map.jpeg", width = 600, height = 500, res = 100)

pheatmap_distances <- pheatmap(sampleDistMatrix, 
                               clustering_distance_rows = sampleDists, 
                               clustering_distance_cols = sampleDists, 
                               col = colors,
                               main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")

#dev.off()

#Perfom the PCA plot
jpeg("../results/PCA.png", width = 600, height = 500, res = 100)

plotPCA(vst)

dev.off()

#Add another way of performing the PCA using ggplot2
# Extract principal components from the vst normalisation
pca <- prcomp(t(assay(vst)))

# Create a data frame with PC scores considering the first principal components. The condition needs to be a factor.
pca_data <- as.data.frame(pca$x[,1:2])
pca_data$condition <- as.factor(DESeq_matrix$condition)

# Plot using ggplot2
ggplot(pca_data, aes(x = PC1, y = PC2)) +
  geom_point(aes(colour = condition),
             shape = 19,
             size = 2.5) +
  labs(x = "PC1", y = "PC2", title = "PCA Plot")

```

# Start the DESeq analysis

```{r Perform DESeq2 analysis of the normalised counts}
# Run DESeq2 analysis
dds <- DESeq(dds)

# Extract differential expression results
res <- results(dds)
res <- data.frame(res)
```

# Save data

```{r}
# Define the path for the output .tsv file
output_file_path <- "../data/DESeq2_results.tsv"

# Save the subset data frame to a .tsv file
write.table(res, 
            file = output_file_path, 
            sep = "\t", 
            quote = FALSE, 
            row.names = TRUE)

# Verify that the file has been saved
if (file.exists(output_file_path)) {
  cat("Results from DESeq2 has been saved to", output_file_path, "\n")
} else {
  cat("Failed to save Results from DESeq2 to", output_file_path, "\n")
}

```

```{r}
# Define the path for the output file
output_file_path <- "../data/vst.rds"

# Save the vst object
saveRDS(vst, file = output_file_path)

# Verify that the file has been saved
if (file.exists(output_file_path)) {
  cat("vst object has been saved to", output_file_path, "\n")
} else {
  cat("Failed to save vst object to", output_file_path, "\n")
}
```
