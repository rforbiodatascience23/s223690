)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
volcano_plot_data <- as.data.frame(res)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
pCutoff = 0.05,
FCcutoff = 1,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
volcano_plot_data <- as.data.frame(res)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
max_pvalue_volcano_plot <- max(volcano_plot_data$pvalue)
min_pvalue_volcano_plot <- min(volcano_plot_data$pvalue)
volcano_plot
#jpeg("volcano_plot_pp_vs_nn_4.jpeg", res = 100)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.05,
FCcutoff = 1,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
#dev.off()
max_pvalue_volcano_plot <- max(log10(volcano_plot_data$pvalue))
volcano_plot_data <- as.data.frame(res)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
max_pvalue_volcano_plot <- max(log10(volcano_plot_data$pvalue))
min_pvalue_volcano_plot <- min(log10(volcano_plot_data$pvalue))
volcano_plot
#jpeg("volcano_plot_pp_vs_nn_4.jpeg", res = 100)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.05,
FCcutoff = 1,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
#dev.off()
volcano_plot_data <- as.data.frame(res)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
max_pvalue_volcano_plot <- max(-log10(volcano_plot_data$pvalue))
min_pvalue_volcano_plot <- min(-log10(volcano_plot_data$pvalue))
volcano_plot
#jpeg("volcano_plot_pp_vs_nn_4.jpeg", res = 100)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.05,
FCcutoff = 1,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
#dev.off()
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.05,
FCcutoff = 2,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
volcano_plot_data <- as.data.frame(res)
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
max_pvalue_volcano_plot <- max(-log10(volcano_plot_data$pvalue))
min_pvalue_volcano_plot <- min(-log10(volcano_plot_data$pvalue))
volcano_plot
#jpeg("volcano_plot_pp_vs_nn_4.jpeg", res = 100)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.1,
FCcutoff = 3,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
#dev.off()
#Just consider the genes that were DE ans VST
de_genes_names <- unique(c(rownames(de_genes)))
de_genes_vst <- vst[rownames(vst) %in% de_genes_names, ]
de_genes_vst_matrix <- assay(de_genes_vst)
#Calculate the z-score
z_scores <- scale(de_genes_vst_matrix)
# Define breaks and labels for the quantile scale (putting the function, it doesn't really matter the name of the variable)
quantile_breaks <- function(z_scores, n = 10) {
breaks <- quantile(z_scores, probs = seq(0, 1, length.out = n), na.rm = TRUE)
breaks[!duplicated(breaks)]
}
breaks <- quantile_breaks(z_scores, n = 11)
# Create a heatmap using pheatmap with a specified color palette
#jpeg("pheatmap_of_expression.jpeg")
pheatmap(t(z_scores),
#annotation_row = annotation_row_4,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap z-score od DE genes",
breaks = breaks,
color = inferno(10),
fontsize_row = 8,
show_colnames = FALSE,
border_color = "NA",
)
#dev.off()
z_scores
#Just consider the genes that were DE ans VST
de_genes_names <- unique(c(rownames(de_genes)))
de_genes_vst <- vst[rownames(vst) %in% de_genes_names, ]
de_genes_vst_matrix <- assay(de_genes_vst)
#Calculate the z-score
z_scores <- scale(de_genes_vst_matrix)
# Define breaks and labels for the quantile scale (putting the function, it doesn't really matter the name of the variable)
quantile_breaks <- function(z_scores, n = 10) {
breaks <- quantile(z_scores, probs = seq(0, 1, length.out = n), na.rm = TRUE)
breaks[!duplicated(breaks)]
}
breaks <- quantile_breaks(z_scores, n = 11)
# Create a heatmap using pheatmap with a specified color palette
#jpeg("pheatmap_of_expression.jpeg")
pheatmap(t(z_scores),
#annotation_row = annotation_row_4,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap z-score od DE genes",
breaks = breaks,
color = viridis(10),
fontsize_row = 8,
show_colnames = FALSE,
border_color = "NA",
)
#dev.off()
pheatmap_distances <- pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
plotPCA(vst)
#Just consider the genes that were DE ans VST
de_genes_names <- unique(c(rownames(de_genes)))
de_genes_vst <- vst[rownames(vst) %in% de_genes_names, ]
de_genes_vst_matrix <- assay(de_genes_vst)
#Calculate the z-score
z_scores <- scale(de_genes_vst_matrix)
# Define breaks and labels for the quantile scale (putting the function, it doesn't really matter the name of the variable)
quantile_breaks <- function(z_scores, n = 10) {
breaks <- quantile(z_scores, probs = seq(0, 1, length.out = n), na.rm = TRUE)
breaks[!duplicated(breaks)]
}
breaks <- quantile_breaks(z_scores, n = 11)
# Create a heatmap using pheatmap with a specified color palette
#jpeg("pheatmap_of_expression.jpeg")
pheatmap(t(z_scores),
#annotation_row = annotation_row_4,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap z-score od DE genes",
breaks = breaks,
color = viridis(10),
fontsize_row = 8,
show_colnames = FALSE,
border_color = "NA",
)
#dev.off()
volcano_plot_data <- as.data.frame(res)
#See what are the maximum and minimum values for the plot
max_log2_volcano_plot <- max(volcano_plot_data$log2FoldChange)
min_log2_volcano_plot <- min(volcano_plot_data$log2FoldChange)
max_pvalue_volcano_plot <- max(-log10(volcano_plot_data$pvalue))
min_pvalue_volcano_plot <- min(-log10(volcano_plot_data$pvalue))
#Create the volcano plot (log2Fold change = 3, pvalue < 0.1)
#jpeg("volcano_plot.jpeg", res = 100)
EnhancedVolcano(volcano_plot_data,
lab = row.names(volcano_plot_data),
labSize = 4,
x = "log2FoldChange",
xlim = c(min_log2_volcano_plot, max_log2_volcano_plot),
y = "padj",
ylim = c(min_pvalue_volcano_plot, max_pvalue_volcano_plot),
pCutoff = 0.1,
FCcutoff = 3,
axisLabSize = 12,
caption = NULL,
subtitle = NULL,
legendPosition = "none",
title = "Volcano plot"
)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = de_gen, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL", ont = "BP")
library(org.Hs.eg.db)
library(AnnotationDbi)
library(org.Hs.eg.db)
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = de_gen, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL", ont = "BP")
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = de_gen, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL", ont = "BP")
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = de_genes, OrgDb = "org.Hs.eg.db", keyType = "ENSEMBL", ont = "BP")
#Just consider the genes that were DE ans VST
de_genes_names <- unique(c(rownames(de_genes)))
de_genes_vst <- vst[rownames(vst) %in% de_genes_names, ]
de_genes_vst_matrix <- assay(de_genes_vst)
#Calculate the z-score
z_scores <- scale(de_genes_vst_matrix)
# Define breaks and labels for the quantile scale (putting the function, it doesn't really matter the name of the variable)
quantile_breaks <- function(z_scores, n = 10) {
breaks <- quantile(z_scores, probs = seq(0, 1, length.out = n), na.rm = TRUE)
breaks[!duplicated(breaks)]
}
breaks <- quantile_breaks(z_scores, n = 11)
# Create a heatmap using pheatmap with a specified color palette
#jpeg("pheatmap_of_expression.jpeg")
pheatmap(t(z_scores),
#annotation_row = annotation_row_4,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap z-score od DE genes",
breaks = breaks,
color = viridis(10),
fontsize_row = 8,
show_colnames = FALSE,
border_color = "NA",
)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = de_genes, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
de_genes
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_np_vs_nn_24_filtered <- filter(GO_results_np_vs_nn_24, Count >5)
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered <- filter(GO_results, Count >5)
#Transform the output into a data frame
GO_results_data_frame <- as.data.frame(GO_results_filtered)
#Plot pp vs. nn timepoint 24
GO_results <- plot(barplot(GO_results_filtered,
showCategory = 20,
title = "GO",
font.size = 5))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered <- filter(GO_results, Count >5)
#Transform the output into a data frame
GO_results_data_frame <- as.data.frame(GO_results_filtered)
#Plot pp vs. nn timepoint 24
GO_results <- plot(barplot(GO_results_filtered,
showCategory = 20,
title = "GO",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results)
#dev.off()
#Plot pp vs. nn timepoint 24
GO_results <- plot(barplot(GO_results_filtered,
showCategory = 10,
title = "GO",
font.size = 10))
#Plot pp vs. nn timepoint 24
GO_results <- plot(barplot(GO_results_filtered,
showCategory = 10,
title = "GO of the DE genes",
font.size = 10))
# 4. Visualize results
plotMA(res)
?enrichGO
#Perform the GO enrichment with a Biological Pathway pov
GO_results_MF <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
#Perform the GO enrichment with a Biological Pathway pov
GO_results_MF <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_MF <- filter(GO_results_MF, Count >5)
#Transform the output into a data frame
GO_results_data_frame_MF <- as.data.frame(GO_results_filtered_MF)
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF,
showCategory = 10,
title = "GO of the DE genes MF",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_MF)
#dev.off()
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF),
showCategory = 10,
title = "GO of the DE genes MF",
font.size = 10))
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF,
showCategory = 10,
title = "GO of the DE genes MF",                                        font.size = 10))
#Perform the GO enrichment with a Biological Pathway pov
GO_results_MF <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_MF <- filter(GO_results_MF, Count >5)
#Transform the output into a data frame
GO_results_data_frame_MF <- as.data.frame(GO_results_filtered_MF)
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF,
showCategory = 10,
title = "GO of the DE genes MF",                                        font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_MF)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered <- filter(GO_results, Count >5)
#Transform the output into a data frame
GO_results_data_frame <- as.data.frame(GO_results_filtered)
#Plot pp vs. nn timepoint 24
GO_results <- plot(barplot(GO_results_filtered,
showCategory = 10,
title = "GO of the DE genes",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results_BP <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_BP <- filter(GO_results_BP, Count >5)
#Transform the output into a data frame
GO_results_data_frame_BP <- as.data.frame(GO_results_filtered_BP)
#Plot pp vs. nn timepoint 24
GO_results_BP <- plot(barplot(GO_results_filtered_BP,
showCategory = 10,
title = "GO of the DE genes BP",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_BP)
#dev.off()
#Perform the GO enrichment with a Biological Pathway pov
GO_results_CC <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "CC")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_CC <- filter(GO_results_CC, Count >5)
#Transform the output into a data frame
GO_results_data_frame_CC <- as.data.frame(GO_results_filtered_CC)
#Plot pp vs. nn timepoint 24
GO_results_CC <- plot(barplot(GO_results_filtered_CC,
showCategory = 10,
title = "GO of the DE genes CC",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_CC)
#dev.off()
grid.arrange(GO_results_MF, GO_results_CC, GO_results_BP, nrow = 1)
#Perform the GO enrichment with a Biological Pathway pov
GO_results_MF <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_MF <- filter(GO_results_MF, Count >5)
#Transform the output into a data frame
GO_results_data_frame_MF <- as.data.frame(GO_results_filtered_MF)
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF,
showCategory = 10,
title = "GO of the DE genes MF",                                        font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_MF)
#dev.off()
layout(matrix(1:3, nrow = 1))  # 1 row, 3 columns
GO_results_MF
GO_results_CC
GO_results_BP
library(gridExtra)
# Combine the plots using grid.arrange
grid.arrange(GO_results_MF,
GO_results_CC,
GO_results_BP,
ncol = 3)
#Just consider the genes that were DE ans VST
de_genes_names <- unique(c(rownames(de_genes)))
de_genes_vst <- vst[rownames(vst) %in% de_genes_names, ]
de_genes_vst_matrix <- assay(de_genes_vst)
#Calculate the z-score
z_scores <- scale(de_genes_vst_matrix)
# Define breaks and labels for the quantile scale (putting the function, it doesn't really matter the name of the variable)
quantile_breaks <- function(z_scores, n = 10) {
breaks <- quantile(z_scores, probs = seq(0, 1, length.out = n), na.rm = TRUE)
breaks[!duplicated(breaks)]
}
breaks <- quantile_breaks(z_scores, n = 11)
# Create a heatmap using pheatmap with a specified color palette
#jpeg("pheatmap_of_expression.jpeg")
pheatmap(t(z_scores),
#annotation_row = annotation_row_4,
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Heatmap z-score od DE genes",
breaks = breaks,
color = viridis(10),
fontsize_row = 8,
show_colnames = FALSE,
border_color = "NA",
)
#dev.off()
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
# Chunk 1
library(clusterProfiler)
library(AnnotationDbi)
library(org.Hs.eg.db)
# Chunk 2: GO enrichment CC
#Perform the GO enrichment with a Biological Pathway pov
GO_results_CC <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "CC")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_CC <- filter(GO_results_CC, Count >5)
#Transform the output into a data frame
GO_results_data_frame_CC <- as.data.frame(GO_results_filtered_CC)
#Plot pp vs. nn timepoint 24
GO_results_CC <- plot(barplot(GO_results_filtered_CC,
showCategory = 10,
title = "GO of the DE genes Cellular Component",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_CC)
#dev.off()
# Chunk 3: GO enrichment BP
#Perform the GO enrichment with a Biological Pathway pov
GO_results_BP <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "BP")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_BP <- filter(GO_results_BP, Count >5)
#Transform the output into a data frame
GO_results_data_frame_BP <- as.data.frame(GO_results_filtered_BP)
#Plot pp vs. nn timepoint 24
GO_results_BP <- plot(barplot(GO_results_filtered_BP,
showCategory = 10,
title = "GO of the DE genes Biological Process",
font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_BP)
#dev.off()
# Chunk 4: GO enrichment MF
#Perform the GO enrichment with a Biological Pathway pov
GO_results_MF <- enrichGO(gene = rownames(de_genes), OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF")
#Filter depending on the gene count per pathway is not <5
GO_results_filtered_MF <- filter(GO_results_MF, Count >5)
#Transform the output into a data frame
GO_results_data_frame_MF <- as.data.frame(GO_results_filtered_MF)
#Plot pp vs. nn timepoint 24
GO_results_MF <- plot(barplot(GO_results_filtered_MF,
showCategory = 10,
title = "GO of the DE genes Mollecular Function",                                        font.size = 10))
#png("GO_results.png", res =250, width = 1000, height = 1300)
print(GO_results_MF)
#dev.off()
library(tidyverse)
library(quarto)
library(EnhancedVolcano)
library(quarto)
library(tidyverse)
library(quarto)
library(EnhancedVolcano)
