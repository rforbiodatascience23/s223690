data <- as.matrix(as.numeric(data))
# Handle zeros by adding pseudocount
data_with_pseudocount <- data + pseudocount
# Perform Bayesian inference using Dirichlet-Multinomial model
posterior_samples <- rmultinom(n = 1, size = rowSums(data_with_pseudocount), prob = data_with_pseudocount / rowSums(data_with_pseudocount))
return(posterior_samples)
}
# Replace zeros with Bayesian method
imputed_data <- replace_zeros_with_bayesian(data)
#Dirichlet-Multinomial Bayesian method
# Load necessary libraries
library(MCMCpack)# For MCMC sampling
library(compositions)  # For compositional data analysis
# Define the function to replace zeros with Bayesian method
replace_zeros_with_bayesian <- function(data, pseudocount = 0.5) {
# Convert each element of the list to numeric if it's not already
data_numeric <- lapply(data, function(x) as.numeric(x))
# Convert data to matrix
data_matrix <- as.matrix(data_numeric)
# Handle zeros by adding pseudocount
data_with_pseudocount <- data_matrix + pseudocount
# Perform Bayesian inference using Dirichlet-Multinomial model
posterior_samples <- rmultinom(n = 1, size = rowSums(data_with_pseudocount), prob = data_with_pseudocount / rowSums(data_with_pseudocount))
return(posterior_samples)
}
# Replace zeros with Bayesian method
imputed_data <- replace_zeros_with_bayesian(data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r Load the libraries}
library(viridis)
library(ggplot2)
library(Ternary)
library(RColorBrewer)
library(readxl)
library(mvtnorm)
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
View(data)
colnames(data)[colnames(data) == "X"] <- "Sample"
colnames(data)[colnames(data) == "X"] <- "Sample_ID"
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
colnames(data)[colnames(data) == "X"] <- "Sample_ID"
library(viridis)
library(ggplot2)
library(Ternary)
library(RColorBrewer)
library(readxl)
library(mvtnorm)
library(readr)
library(dplyr)
library(tidyr)
library(Matrix)
library(ggplot2)
library(irlba)
# replace zeros with pseudocounts using the Dirichlet distribution
alpha <- 0.5  # Dirichlet distribution parameter
pseudo_data <- matrix(rdirichlet(nrow(data), alpha), nrow = nrow(data))
# Function to generate random samples from a Dirichlet distribution
rdirichlet <- function(n, alpha) {
mat <- matrix(rmultinom(n = 1, size = sum(alpha), prob = alpha), nrow = length(alpha))
return(mat / rowSums(mat))
}
# Example usage
alpha <- 0.5  # Dirichlet distribution parameter
pseudo_data <- rdirichlet(nrow(data), alpha)
View(pseudo_data)
View(data)
pseudo_data <- rdirichlet(nrow(data), alpha)
# Define Dirichlet distribution parameters
alpha <- 0.5  # Dirichlet distribution parameter
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(alpha), prob = rep(alpha, ncol(data))))
# Add pseudo data to original data
data <- data + pseudo_data
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(alpha), prob = rep(alpha, ncol(data))))
library(viridis)
library(ggplot2)
library(Ternary)
library(RColorBrewer)
library(readxl)
library(mvtnorm)
library(readr)
library(dplyr)
library(tidyr)
library(Matrix)
library(ggplot2)
library(irlba)
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
library(viridis)
library(ggplot2)
library(Ternary)
library(RColorBrewer)
library(readxl)
library(mvtnorm)
library(readr)
library(dplyr)
library(tidyr)
library(Matrix)
library(ggplot2)
library(irlba)
install.packages("irlba")
library(viridis)
library(ggplot2)
library(Ternary)
library(RColorBrewer)
library(readxl)
library(mvtnorm)
library(readr)
library(dplyr)
library(tidyr)
library(Matrix)
library(ggplot2)
library(irlba)
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
View(data)
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
#colnames(data)[colnames(data) == "X"] <- "Sample_ID"
data <- data[, -which(names(df) == "X")]
View(data)
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
#colnames(data)[colnames(data) == "X"] <- "Sample_ID"
data <- data[, -which(names(df) == "X")]
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
#colnames(data)[colnames(data) == "X"] <- "Sample_ID"
data <- data[, -1]
View(data)
# Define Dirichlet distribution parameters
alpha <- 0.5  # Dirichlet distribution parameter
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(alpha), prob = rep(alpha, ncol(data))))
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(data), prob = rep(alpha, ncol(data))))
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(alpha), prob = rep(alpha, ncol(data))))
# Add pseudo data to original data
data <- data + pseudo_data
# Define Dirichlet distribution parameters
alpha <- c(0.5)  # Dirichlet distribution parameter
# Define Dirichlet distribution parameters
alpha <- c(0.5)  # Dirichlet distribution parameter
# Generate random samples from Dirichlet distribution
pseudo_data <- t(rmultinom(n = nrow(data), size = sum(alpha), prob = rep(alpha, ncol(data))))
install.packages("DirichletReg")
library(DirichletReg)
# Fit Dirichlet distribution
fit <- drdirichlet(data)
# Install and load required packages
install.packages("VGAM")
library(VGAM)
# Define parameters of the Dirichlet distribution
alpha <- c(0.5)  # Parameters (shape) of the Dirichlet distribution
# Generate random samples from Dirichlet distribution
random_samples <- rdirichlet(n = length(data), alpha = alpha)
View(random_samples)
data <- data + t(random_samples)
View(data)
# Install and load the DirichletReg package
install.packages("DirichletReg")
install.packages("DirichletReg")
library(DirichletReg)
# Function to replace zeros with Dirichlet distribution samples
replace_zeros <- function(data, alpha) {
zero_indices <- which(data == 0)
non_zero_indices <- which(data != 0)
# Generate samples from Dirichlet distribution
dirichlet_samples <- rdirichlet(length(zero_indices), alpha = alpha)
# Replace zeros with Dirichlet samples
data[zero_indices] <- dirichlet_samples
return(data)
}
# Set alpha for Dirichlet distribution
alpha <- 0.5
# Replace zeros with Dirichlet distribution samples
comp_data_replaced <- replace_zeros(data, alpha)
comp_data <- read.csv("C:/Users/marin/OneDrive/Documentos/OneDrive Asus/OneDrive/Old Stuff/Escritorio/Spring 2024/Compositional Data/Final Report/hominidae_fecal.csv")
#colnames(data)[colnames(data) == "X"] <- "Sample_ID"
comp_data <- comp_data[, -1]
# Install and load the DirichletReg package
install.packages("DirichletReg")
library(DirichletReg)
# Function to replace zeros with Dirichlet distribution samples
replace_zeros <- function(data, alpha) {
zero_indices <- which(data == 0)
non_zero_indices <- which(data != 0)
# Generate samples from Dirichlet distribution
dirichlet_samples <- rdirichlet(length(zero_indices), alpha = alpha)
# Replace zeros with Dirichlet samples
data[zero_indices] <- dirichlet_samples
return(data)
}
# Set alpha for Dirichlet distribution
alpha <- 0.5
# Replace zeros with Dirichlet distribution samples
comp_data_replaced <- replace_zeros(comp_data, alpha)
install.packages("DirichletReg")
# Install and load the DirichletReg package
#install.packages("DirichletReg")
library(DirichletReg)
# Function to replace zeros with Dirichlet distribution samples
replace_zeros <- function(data, alpha) {
zero_indices <- which(data == 0)
non_zero_indices <- which(data != 0)
# Generate samples from Dirichlet distribution
dirichlet_samples <- rdirichlet(length(zero_indices), alpha = alpha)
# Replace zeros with Dirichlet samples
data[zero_indices] <- dirichlet_samples
return(data)
}
# Set alpha for Dirichlet distribution
alpha <- 0.5
# Replace zeros with Dirichlet distribution samples
comp_data_replaced <- replace_zeros(comp_data, alpha)
# Install and load the DirichletReg package
#install.packages("DirichletReg")
library(DirichletReg)
# Function to replace zeros with Dirichlet distribution samples
replace_zeros <- function(data, alpha) {
zero_indices <- which(data == 0)
non_zero_indices <- which(data != 0)
# Generate samples from Dirichlet distribution
dirichlet_samples <- rdirichlet(length(zero_indices), alpha = alpha)
# Replace zeros with Dirichlet samples
data[zero_indices] <- dirichlet_samples
return(data)
}
# Set alpha for Dirichlet distribution
alpha <- 0.5
# Replace zeros with Dirichlet distribution samples
comp_data_replaced <- replace_zeros(comp_data, alpha)
View(comp_data)
View(data)
View(comp_data)
View(data)
# Chunk 1: Load libraries
library(tidyverse)
library(DESeq2)
# Chunk 2
raw_data <- read_delim("../data/_raw/citotoxicity_genes_breast_cancer.tsv", delim = "\t", show_col_types = FALSE)
library(tidyverse)
library(DESeq2)
raw_data <- read_delim("../data/_raw/citotoxicity_genes_breast_cancer.tsv", delim = "\t", show_col_types = FALSE)
getwd()
setwd("C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R")
raw_data <- read_delim("../data/_raw/citotoxicity_genes_breast_cancer.tsv", delim = "\t", show_col_types = FALSE)
setwd("C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R")
raw_data <- read_delim("../data/_raw/citotoxicity_genes_breast_cancer.tsv", delim = "\t", show_col_types = FALSE)
#Rename the columns
```{r}
# Sample list
list <- c("Genes", "GSM5574685	tumor rep1", "GSM5574686 tumor rep2", "GSM5574687 tumor rep3", "GSM5574688 tumor rep4", "GSM5574689 tumor rep5", "GSM5574690 tumor rep6", "GSM5574691 tumor rep7", "GSM5574692 tumor rep8", "GSM5574693 tumor rep9", "GSM5574694 tumor rep10", "GSM5574695 tumor rep11", "GSM5574696 tumor rep12", "GSM5574697 tumor rep13", "GSM5574698 tumor rep14", "GSM5574699 tumor rep15",  "GSM5574700 tumor rep16", "GSM5574701 tumor rep17", "GSM5574702 tumor rep18", "GSM5574703 tumor rep19", "GSM5574704 tumor rep20", "GSM5574705 tumor rep21", "GSM5574706 tumor rep22", "GSM5574707 tumor rep23", "GSM5574708 tumor rep24", "GSM5574709 tumor rep25", "GSM5574710 tumor rep26", "GSM5574711 tumor rep27", "GSM5574712 tumor rep28", "GSM5574713 tumor rep29", "GSM5574714 tumor rep30", "GSM5574715 normal rep1", "GSM5574716 normal rep2", "GSM5574717 normal rep3", "GSM5574718 normal rep4", "GSM5574719 normal rep5", "GSM5574720 normal rep6", "GSM5574721 normal rep7", "GSM5574722 normal rep8", "GSM5574723 normal rep9", "GSM5574724 normal rep10", "GSM5574725 normal rep11", "GSM5574726 normal rep12",  "GSM5574727 normal rep13", "GSM5574728 normal rep14", "GSM5574729 normal rep15", "GSM5574730 normal rep16", "GSM5574731 normal rep17", "GSM5574732 normal rep18", "GSM5574733 normal rep19", "GSM5574734 normal rep20", "GSM5574735 normal rep21", "GSM5574736 normal rep22", "GSM5574737 normal rep23", "GSM5574738 normal rep24", "GSM5574739 normal rep25", "GSM5574740 normal rep26", "GSM5574741 normal rep27", "GSM5574742 normal rep28", "GSM5574743 normal rep29", "GSM5574744 normal rep30")
# Remove words that start with "GSM" so we have the actual names
new_column_names <- gsub("\\bGSM\\w+\\s*", "", list)
new_column_names <- gsub(" ", "_", new_column_names)
# Print the cleaned list
print(new_column_names)
#Change the name of the columns with this one
colnames(raw_data) <- new_column_names
# Set the first column (gene names) as rownames
raw_data <- as.data.frame(raw_data)
rownames(raw_data) <- raw_data[, 1]
raw_data <- raw_data[, -1]
View(raw_data)
#Check if there are NaN or na values in the data set
nan_counts <- unique(colSums(is.na(raw_data)))
# Set the sample names
sample_names <- colnames(raw_data)
# Set the sample conditions
sample_condition <- strsplit(sample_names, "_")
View(sample_condition)
sample_condition <- sapply(sample_condition, function(x) x[1])
# Create a data frame with sample information
DESeq_matrix <- data.frame(sampleName = sample_names,
fileName = raw_data,
condition = sample_condition)
# Create a data frame with sample information
DESeq_matrix <- data.frame(fileName = raw_data,
condition = sample_condition)
# Create a data frame with sample information
DESeq_matrix <- data.frame(sampleName = sample_names,
fileName = raw_data,
condition = sample_condition)
# Create a data frame with sample information
DESeq_matrix <- data.frame(sampleName = sample_names,
fileName = t(raw_data),
condition = sample_condition)
View(DESeq_matrix)
t(raw_data)
try <- t(raw_data)
View(try)
?DESeqDataSetFromMatrix
# 1. Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = DESeq_matrix[, -c(1, length(DESeq_matrix))],
colData = DESeq_matrix,
design = ~ condition)
# 1. Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = DESeq_matrix,
colData = DESeq_matrix,
design = ~ condition)
countData <- DESeq_matrix[, -c(1, length(DESeq_matrix))]
View(countData)
# 1. Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = DESeq_matrix,
design = ~ condition)
# Check dimensions of countData and colData
ncol_countData <- ncol(countData)
nrow_colData <- nrow(DESeq_matrix)
print(ncol_countData)
print(nrow_colData)
# 1. Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = t(DESeq_matrix),
design = ~ condition)
# 1. Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_data,
colData = DESeq_matrix,
design = ~ condition)
#Set the conditions so we can perform DESeq2 afterwards
# Convert raw_data to a matrix
count_matrix <- as.matrix(raw_data)
# Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
colData = DESeq_matrix,
design = ~ condition)
# Check for missing values in your count matrix
any(is.na(count_matrix))
all(sapply(count_matrix, is.numeric))
head(count_matrix)
summary(count_matrix)
# Create a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = round(count_matrix),
colData = DESeq_matrix,
design = ~ condition)
# 2. Run DESeq2 analysis
dds <- DESeq(dds)
#Get rid of the genes that have very low count
dds <- dds[ rowSums(counts(dds)) > 10, ]
# Run DESeq2 analysis
dds <- DESeq(dds)
# 3. Extract differential expression results
res <- results(dds)
View(res)
# 4. Visualize results
plotMA(res)
View(dds)
res <- data.frame(res)
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.05)
de_genes <- subset(de_genes, log2FoldChange > 2 | log2FoldChange < -2)
de_genes <- subset(de_genes, !is.na(padj))
View(de_genes)
View(de_genes)
#VST for the PCA plot
dds <- estimateSizeFactors(dds)
vst <- vst(dds, blind = FALSE)
sampleDists <- dist(t(assay(vst)))
#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
library(tidyverse)
library(DESeq2)
library(RColorBrewer)
#VST for the PCA plot
dds <- estimateSizeFactors(dds)
vst <- vst(dds, blind = FALSE)
sampleDists <- dist(t(assay(vst)))
#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
library(pheatmap)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
#VST for the PCA plot
dds <- estimateSizeFactors(dds)
vst <- vst(dds, blind = FALSE)
sampleDists <- dist(t(assay(vst)))
#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
jpeg("distance_heatmap.jpeg")
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
dev.off()
#VST for the PCA plot
dds <- estimateSizeFactors(dds)
vst <- vst(dds, blind = FALSE)
sampleDists <- dist(t(assay(vst)))
#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
#jpeg("distance_heatmap.jpeg")
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
#dev.off()
pheatmap()
pheatmap_distances <- pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
pheatmap_distances
# Chunk 1: Load libraries
library(tidyverse)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
# Chunk 2: Set the working directory and read the data file
setwd("C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R")
raw_data <- read_delim("../data/_raw/citotoxicity_genes_breast_cancer.tsv", delim = "\t", show_col_types = FALSE)
# Chunk 3: Rename the columns
# Sample list
list <- c("Genes", "GSM5574685	tumor rep1", "GSM5574686 tumor rep2", "GSM5574687 tumor rep3", "GSM5574688 tumor rep4", "GSM5574689 tumor rep5", "GSM5574690 tumor rep6", "GSM5574691 tumor rep7", "GSM5574692 tumor rep8", "GSM5574693 tumor rep9", "GSM5574694 tumor rep10", "GSM5574695 tumor rep11", "GSM5574696 tumor rep12", "GSM5574697 tumor rep13", "GSM5574698 tumor rep14", "GSM5574699 tumor rep15",  "GSM5574700 tumor rep16", "GSM5574701 tumor rep17", "GSM5574702 tumor rep18", "GSM5574703 tumor rep19", "GSM5574704 tumor rep20", "GSM5574705 tumor rep21", "GSM5574706 tumor rep22", "GSM5574707 tumor rep23", "GSM5574708 tumor rep24", "GSM5574709 tumor rep25", "GSM5574710 tumor rep26", "GSM5574711 tumor rep27", "GSM5574712 tumor rep28", "GSM5574713 tumor rep29", "GSM5574714 tumor rep30", "GSM5574715 normal rep1", "GSM5574716 normal rep2", "GSM5574717 normal rep3", "GSM5574718 normal rep4", "GSM5574719 normal rep5", "GSM5574720 normal rep6", "GSM5574721 normal rep7", "GSM5574722 normal rep8", "GSM5574723 normal rep9", "GSM5574724 normal rep10", "GSM5574725 normal rep11", "GSM5574726 normal rep12",  "GSM5574727 normal rep13", "GSM5574728 normal rep14", "GSM5574729 normal rep15", "GSM5574730 normal rep16", "GSM5574731 normal rep17", "GSM5574732 normal rep18", "GSM5574733 normal rep19", "GSM5574734 normal rep20", "GSM5574735 normal rep21", "GSM5574736 normal rep22", "GSM5574737 normal rep23", "GSM5574738 normal rep24", "GSM5574739 normal rep25", "GSM5574740 normal rep26", "GSM5574741 normal rep27", "GSM5574742 normal rep28", "GSM5574743 normal rep29", "GSM5574744 normal rep30")
# Remove words that start with "GSM" so we have the actual names
new_column_names <- gsub("\\bGSM\\w+\\s*", "", list)
new_column_names <- gsub(" ", "_", new_column_names)
# Print the cleaned list
print(new_column_names)
#Change the name of the columns with this one
colnames(raw_data) <- new_column_names
# Set the first column (gene names) as rownames
raw_data <- as.data.frame(raw_data)
rownames(raw_data) <- raw_data[, 1]
raw_data <- raw_data[, -1]
# Chunk 4: Check if there are na values in the data set
#Check if there are NaN or na values in the data set
nan_counts <- unique(colSums(is.na(raw_data)))
# Chunk 5: Create the DESeq input (DESeq matrix)
# Set the sample names
sample_names <- colnames(raw_data)
# Set the sample conditions
sample_condition <- strsplit(sample_names, "_")
sample_condition <- sapply(sample_condition, function(x) x[1])
# Create a data frame with sample information
DESeq_matrix <- data.frame(sampleName = sample_names,
fileName = t(raw_data),
condition = sample_condition)
#Set the conditions so we can perform DESeq2 afterwards
# Convert raw_data to a matrix
count_matrix <- as.matrix(raw_data)
# Create a DESeqDataSet object. The round(count_matrix) help to have non-negative integers.
dds <- DESeqDataSetFromMatrix(countData = round(count_matrix),
colData = DESeq_matrix,
design = ~ condition)
#Get rid of the genes that have very low count
dds <- dds[ rowSums(counts(dds)) > 10, ]
# Chunk 6: Perform DESeq2 analysis of the normalised counts
# Run DESeq2 analysis
dds <- DESeq(dds)
# Extract differential expression results
res <- results(dds)
res <- data.frame(res)
# Chunk 7: Check the DE genes
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.05)
de_genes <- subset(de_genes, log2FoldChange > 2 | log2FoldChange < -2)
de_genes <- subset(de_genes, !is.na(padj))
# Chunk 8: plotMA
# 4. Visualize results
plotMA(res)
#VST for the PCA plot
dds <- estimateSizeFactors(dds)
vst <- vst(dds, blind = FALSE)
sampleDists <- dist(t(assay(vst)))
#PHeatMap with the distances
sampleDistMatrix <- as.matrix(sampleDists)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
#jpeg("distance_heatmap.jpeg")
pheatmap_distances <- pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
#dev.off()
plotPCA(vst_4)
plotPCA(vst)
pheatmap_distances <- pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors,
main = "Heatmap of sample-to-sample distances using the variance stabilizing transformed values")
plotPCA(vst)
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.1)
de_genes <- subset(de_genes, log2FoldChange > 2 | log2FoldChange < -2)
de_genes <- subset(de_genes, !is.na(padj))
View(de_genes)
View(de_genes)
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.05)
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.1)
#Get the differentially expressed genes
de_genes <- subset(res, padj < 0.1)
de_genes <- subset(de_genes, log2FoldChange > 3 | log2FoldChange < -3)
de_genes <- subset(de_genes, !is.na(padj))
View(de_genes)
