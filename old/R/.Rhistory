raw_data <- read.csv("..\data\_raw\Arsenic_Cancer_Final_2020Sept2.csv")
raw_data <- read.csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
View(raw_data)
raw_data <- read.csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
library(readxl)
library(readxl)
# Reading the file
```{r Read the file}
# Reading the file
```{r Read the file}
original_path <- "https://github.com/Masaam2000/Data_reexam/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
original_path <- "https://github.com/Masaam2000/Data_reexam/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
download.file(original_path, destination_file, method = "auto")
original_path <- "https://github.com/Masaam2000/Data_reexam/blob/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
original_path <- "https://github.com/Masaam2000/Data_reexam/blob/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
# Download the file
```{r}
download.file(original_path, destination_file, method = "auto")
# Chunk 1
library(tidyverse)
library(readr)
library(readxl)
# Chunk 2
original_path <- "https://github.com/Masaam2000/Data_reexam/blob/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
# Chunk 3
download.file(original_path, destination_file, method = "auto")
prostate_data <- read_csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
View(prostate_data)
read.csv(original_path)
raw_data <- read_csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
raw_data <- read_file("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
raw_data <- read_csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
library(tidyverse)
library(readr)
library(readxl)
library(readr)
library(readxl)
library(tidyverse)
library(readr)
library(readxl)
# Setting the initial and final path
```{r}
original_path <- "https://github.com/Masaam2000/Data_reexam/blob/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
# Download the file
```{r}
download.file(original_path, destination_file, method = "auto")
download.file(original_path, destination_file, method = "auto")
#Transform the file from csv to tsv
```{r}
raw_data <- read_csv("../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv")
View(raw_data)
original_path <- "https://raw.githubusercontent.com/Masaam2000/Data_reexam/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
download.file(original_path, destination_file, method = "auto")
raw_data <- read_csv(destination_file)
View(raw_data)
raw_data <- read_csv(destination_file)
raw_data <- write_delim(raw_data,
file= 'Arsenic_Cancer_Final_2020Sept2.tsv',
delim = "\t", col_names = TRUE)
raw_data <- read_csv(destination_file)
raw_data <- write_delim(raw_data,
file= "../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv",
delim = "\t", col_names = TRUE)
View(raw_data)
class(raw_data)
library("tidyverse")
#| warning: false
# Read TSV file into a data frame
raw_data <- read_delim("../data/data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
#| warning: false
# Read TSV file into a data frame
raw_data <- read_delim("../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
View(raw_data)
raw_data$County <- rename(raw_data$City)
View(raw_data)
raw_data$City <- rename(raw_data$County)
raw_data$City <- colnames(raw_data$County)
View(raw_data)
raw_data$City <- colnames(raw_data$County)
View(raw_data)
library(tidyverse)
library(tidyverse)
# Read the data file
```{r}
raw_data <- read_delim("../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
raw_data <- read_delim("../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
raw_data$City <- rename(raw_data$County)
colnames(raw_data)[colnames(raw_data) == "Country"] <- "City"
View(raw_data)
# Chunk 1: Load libraries
library(tidyverse)
# Chunk 2
raw_data <- read_delim("../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
# Chunk 3
colnames(raw_data)[colnames(raw_data) == "Country"] <- "City"
View(raw_data)
colnames(raw_data)[colnames(raw_data) == "County"] <- "City"
View(raw_data)
colnames(raw_data)[colnames(raw_data) == "Population_Served"] <- "Population_Count"
colnames(raw_data)
colnames(raw_data)[colnames(raw_data) == "Total_CWS_County"] <- "CWS_City"
raw_data$Percent_Female <- 100 - raw_data$Percent_Male
View(raw_data)
colnames(raw_data)[colnames(raw_data) == "Percent_Same_County_Residence_At_Least_5_Years"] <- "Percent_Same_City_Residence_At_Least_5_Years"
# Chunk 1
library(tidyverse)
library(readr)
library(readxl)
# Chunk 2
#raw.githubusercontent.com is needed so we make sure that we are downloading the raw file
original_path <- "https://raw.githubusercontent.com/Masaam2000/Data_reexam/main/Arsenic_Cancer_Final_2020Sept2.csv"
destination_file <- "../data/_raw/Arsenic_Cancer_Final_2020Sept2.csv"
# Chunk 3
download.file(original_path, destination_file, method = "auto")
# Chunk 4
#This code separates the data with tabs and not comas
raw_data <- read_csv(destination_file)
raw_data <- write_delim(raw_data,
file= "../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv",
delim = "\t", col_names = TRUE)
View(raw_data)
# Chunk 1: Load libraries
library(tidyverse)
# Chunk 2
raw_data <- read_delim("../data/_raw/Arsenic_Cancer_Final_2020Sept2.tsv", delim = "\t", show_col_types = FALSE)
# Chunk 3
colnames(raw_data)[colnames(raw_data) == "County"] <- "City"
colnames(raw_data)[colnames(raw_data) == "Population_Served"] <- "Population_Count"
colnames(raw_data)[colnames(raw_data) == "Total_CWS_County"] <- "CWS_City"
colnames(raw_data)[colnames(raw_data) == "Percent_Same_County_Residence_At_Least_5_Years"] <- "Percent_Same_City_Residence_At_Least_5_Years"
raw_data$Percent_Female <- 100 - raw_data$Percent_Male
View(raw_data)
relocate(raw_data$Percent_Female, .after = raw_data$Percent_Male)
?relocate
raw_data %>% relocate(raw_data$Percent_Female, .after = raw_data$Percent_Male)
raw_data %>% relocate(Percent_Female, .after = Percent_Male)
View(raw_data)
raw_data %>% relocate(Percent_Female, .after = Percent_Male)
View(raw_data)
?select
raw_data <- raw_data %>% relocate(Percent_Female, .after = Percent_Male)
colnames(raw_data)
columns_to_keep <- c("FIPS", "State", "City", "Population_Count", "Bladder_Count", "Colorectal_Count", "Kidney_Count", "CWS_City", "Percent_Male", "Percent_Female", "Percent_Same_City_Residence_At_Least_5_Years", "Percent_Ever_Had_Endoscopy", "Percent_Ever_Smoked", "EQI_AIR", "EQI_WATER", "EQI_LAND", "EQI_SD", "EQI_BUILT", "EQI_OVERALL")
selected_data <- raw_data |> select(all_of(columns_to_keep))
View(selected_data)
colnames(raw_data)[colnames(raw_data) == "FIPS"] <- "ID"
colnames(raw_data)[colnames(raw_data) == "County"] <- "City"
colnames(raw_data)[colnames(raw_data) == "Population_Served"] <- "Population_Count"
colnames(raw_data)[colnames(raw_data) == "Total_CWS_County"] <- "CWS_City"
colnames(raw_data)[colnames(raw_data) == "Percent_Same_County_Residence_At_Least_5_Years"] <- "Percent_Same_City_Residence_At_Least_5_Years"
colnames(raw_data)[colnames(raw_data) == "FIPS"] <- "ID"
raw_data$Percent_Female <- 100 - raw_data$Percent_Male
raw_data <- raw_data %>% relocate(Percent_Female, .after = Percent_Male)
#Keep specific columns from the data set
columns_to_keep <- c("ID", "State", "City", "Population_Count", "Bladder_Count", "Colorectal_Count", "Kidney_Count", "CWS_City", "Percent_Male", "Percent_Female", "Percent_Same_City_Residence_At_Least_5_Years", "Percent_Ever_Had_Endoscopy", "Percent_Ever_Smoked", "EQI_AIR", "EQI_WATER", "EQI_LAND", "EQI_SD", "EQI_BUILT", "EQI_OVERALL")
selected_data <- raw_data |> select(all_of(columns_to_keep))
selected_data <- raw_data |> select(all_of(columns_to_keep))
View(selected_data)
nan_counts <- colSums(is.na(selected_data))
unique(nan_counts)
#Create a list of cities that the study was done
cities <- unique(selected_data$City)
state <- unique(selected_data$State)
state
colnames(selected_data)
west_coast <- c("Washington", "Orgeon", "Nevada", "California")
south_west <- c("Utah", "Colorado", "Arizona", "New Mexico", "Texas", "Oklahoma")
great_lakes <- c("Minnesota", "Iowa", "Missouri", "Wisconsin", "Illinois", "Indiana", "Michigan", "Ohio")
south <- c("Arkansas", "Lousiana", "Missisipi", "Alabama", "Georgia", "Florida", "South Carolina", "Tennesse", "North Carolina")
east_coast <- c("Pennsylvania", "Virginia", "West Virginia", "Kentucky", "Distict of Columbia", "Maryland")
new_england <- ("Delaware", "New Jersey", "Conneticut", "Rhode Island", "New York", "Massachusetts", "Vermont", "New Hampshire", "Maine")
new_england <- c("Delaware", "New Jersey", "Conneticut", "Rhode Island", "New York", "Massachusetts", "Vermont", "New Hampshire", "Maine")
unique(east_coast, great_lakes, new_england, south, south_west, west_coast)
count(east_coast, great_lakes, new_england, south, south_west, west_coast)
unique(c(east_coast, great_lakes, new_england, south, south_west, west_coast))
west_coast <- c("Washington", "Orgeon", "Nevada", "California", "Alaska", "Hawaii")
south_west <- c("Utah", "Colorado", "Arizona", "New Mexico", "Texas", "Oklahoma")
(verd) mid_west <- c("Idaho", "Nebraska", "Montana", "Wyoming", "North Dakota", "South Dakota", "Nebraska", "Kansas")
great_lakes <- c("Minnesota", "Iowa", "Missouri", "Wisconsin", "Illinois", "Indiana", "Michigan", "Ohio")
south <- c("Arkansas", "Lousiana", "Missisipi", "Alabama", "Georgia", "Florida", "South Carolina", "Tennesse", "North Carolina")
east_coast <- c("Pennsylvania", "Virginia", "West Virginia", "Kentucky", "Distict of Columbia", "Maryland")
new_england <- c("Delaware", "New Jersey", "Conneticut", "Rhode Island", "New York", "Massachusetts", "Vermont", "New Hampshire", "Maine")
> unique(c(east_coast, great_lakes, new_england, south, south_west, west_coast))
unique(c(east_coast, great_lakes, new_england, south, south_west, west_coast))
count(unique(c(east_coast, great_lakes, new_england, south, south_west, west_coast)))
states_west_coast <- c("Washington", "Orgeon", "Nevada", "California", "Alaska", "Hawaii")
states_south_west <- c("Utah", "Colorado", "Arizona", "New Mexico", "Texas", "Oklahoma")
states_mid_west <- c("Idaho", "Nebraska", "Montana", "Wyoming", "North Dakota", "South Dakota", "Nebraska", "Kansas")
states_great_lakes <- c("Minnesota", "Iowa", "Missouri", "Wisconsin", "Illinois", "Indiana", "Michigan", "Ohio")
states_south <- c("Arkansas", "Lousiana", "Missisipi", "Alabama", "Georgia", "Florida", "South Carolina", "Tennesse", "North Carolina")
states_east_coast <- c("Pennsylvania", "Virginia", "West Virginia", "Kentucky", "Distict of Columbia", "Maryland")
states_new_england <- c("Delaware", "New Jersey", "Conneticut", "Rhode Island", "New York", "Massachusetts", "Vermont", "New Hampshire", "Maine")
raw_data$percent_bladder_cancer <- (raw_data$Bladder_Count / raw_data$Population_Count) * 100
raw_data$percent_bladder_cancer <- (round(raw_data$Bladder_Count / raw_data$Population_Count) * 100), 2)
raw_data$percent_bladder_cancer <- round(raw_data$percent_bladder_cancer, 2)
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE))
View(selected_data)
View(population_sum_by_state)
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE)) %>%
summarise(percent_bladder_cancer = ((sum(Bladder_Count, na.rm = TRUE) / total_population)*100))
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE)) %>%
percent_bladder_cancer = ((summarise(sum(Bladder_Count, na.rm = TRUE)) / total_population)*100))
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE)) %>%
summarise(percent_bladder_cancer = sum(Bladder_Count, na.rm = TRUE))
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE)) %>%
summarise(bladder_cancer_count_state = sum(Bladder_Count, na.rm = TRUE))
# Group data dependding on the states
population_sum_by_state <- selected_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE)),
bladder_cancer_count_state = sum(Bladder_Count, na.rm = TRUE)
View(raw_data)
# Group data dependding on the states
population_sum_by_state <- raw_data %>%
# Group data dependding on the states
population_sum_by_state <- raw_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE),
bladder_cancer_count_state = sum(Bladder_Count, na.rm = TRUE)
View(population_sum_by_state)
View(population_sum_by_state)
summarise(total_population = sum(Population_Count, na.rm = TRUE)
colnames(raw_data)
colnames(raw_data)
# Group data dependding on the states
population_sum_by_state <- raw_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE), bladder_count_state = sum(Bladder_Count))
# Group data dependding on the states
population_sum_by_state <- raw_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE),
bladder_count_state = sum(Bladder_Count, na.rm = T),
colorectal_count_state = sum(Colorectal_Count, na.rm = T))
# Create a new data set that group all the information of the cancer count
population_sum_by_state <- raw_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE),
bladder_count_state = sum(Bladder_Count, na.rm = T),
colorectal_count_state = sum(Colorectal_Count, na.rm = T),
kidney_count_state = sum(Kidney_Count, na.rm = T))
# Create a new data set that group all the information of the cancer count
data_grouping_state <- raw_data %>%
group_by(State) %>%
summarise(total_population = sum(Population_Count, na.rm = TRUE),
bladder_count_state = sum(Bladder_Count, na.rm = T),
colorectal_count_state = sum(Colorectal_Count, na.rm = T),
kidney_count_state = sum(Kidney_Count, na.rm = T))
colnames(data_grouping_state)
#Add new columns with the percentage of the counts comparing the total population tested
data_grouping_state$percent_bladder_count_state <- (data_grouping_state$bladder_count_state / data_grouping_state$total_population) * 100
View(data_grouping_state)
data_grouping_state$percent_colorectal_count_state <- (data_grouping_state$colorectal_count_state / data_grouping_state$total_population) * 100
data_grouping_state$percent_kidney_count_state <- (data_grouping_state$kidney_count_state / data_grouping_state$total_population) * 100
data_grouping_state$percent_bladder_count_state <- round(data_grouping_state$percent_bladder_count_state, 2)
data_grouping_state$percent_colorectal_count_state <- round(data_grouping_state$percent_colorectal_count_state, 2)
data_grouping_state$percent_kidney_count_state <- round(data_grouping_state$percent_kidney_count_state, 2)
read_tsv(""C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R/human_liver.tsv"")
read_tsv("C:/Users/marin/OneDrive/Documentos/GitHub/s223690/R/human_liver.tsv")
soft_data <- read.delim("GSE263848_family.soft", header = TRUE)
View(soft_data)
soft_data <- read.delim("GSE263848_series_matrix.txt", header = TRUE)
soft_data <- read.delim("GDS2976_full.soft", header = TRUE)
View(soft_data)
